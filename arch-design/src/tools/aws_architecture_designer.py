from strands import tool


@tool
def design_aws_architecture(user_requirements: str, detailed_requirements: str = "", mode: str = "analyze") -> str:
    """
    Design AWS architecture based on natural language requirements with progressive refinement.
    
    This tool works in two modes:
    1. 'analyze' mode: Identifies relevant AWS components and asks follow-up questions
    2. 'design' mode: Creates comprehensive architecture design with detailed requirements
    
    Args:
        user_requirements: Initial natural language description of the system requirements
        detailed_requirements: Detailed requirements gathered from follow-up questions (for design mode)
        mode: Either 'analyze' (identify components & ask questions) or 'design' (create final architecture)
    
    Returns:
        For 'analyze' mode:
        - Identified AWS components based on initial requirements
        - Component-specific questions for detailed architecture design
        
        For 'design' mode:
        - Complete AWS architecture design with implementation details
        - Best practices and deployment recommendations
    """
    
    if mode == "analyze":
        # Step 1: Analyze requirements and identify AWS components
        # Step 2: Use AWS MCP server to get detailed component information  
        # Step 3: Call review_requirements internally to generate component-specific questions
        return f"""
# AWS Architecture Analysis

## Initial Requirements Analysis
{user_requirements}

## Phase 1: AWS Component Identification
I'll analyze your requirements and identify the most relevant AWS services, then ask detailed questions about each component to create a tailored architecture.

Let me first identify the key AWS components for your requirements and then ask specific questions about each...
"""
    
    else:  # design mode
        # Create comprehensive architecture design using detailed requirements
        return f"""
# Comprehensive AWS Architecture Design

Based on your initial requirements and detailed answers, I'll now create a complete architecture design.

**Initial Requirements:**
{user_requirements}

**Detailed Specifications:**
{detailed_requirements}

## Complete Architecture Design
[The LLM will create the full architecture design with all details]
"""
    # The actual architecture design logic will be handled by the LLM using:
    # 1. The system prompt (AWS architecture specialist knowledge)
    # 2. AWS MCP server for current service information
    # 3. This tool's structured output format
    
    data_flow_section = ""
    if include_data_flow:
        data_flow_section = """

## Application Data Flow Architecture

*Note: The agent will design comprehensive application data flow patterns including:*
- **User Request Flow**: Browser/Client → Load Balancer → Application → Backend Services → Database
- **Authentication Flow**: Login process, JWT token generation and validation
- **API Request/Response**: RESTful API patterns and data exchange
- **Database Operations**: Read/write patterns, connection pooling, transaction management
- **Caching Layer**: Session caching, query result caching, CDN cache flows
- **Private Network Flow**: How AWS customers access via private channels
- **Error Handling Flow**: How errors propagate through the system
- **Static Asset Flow**: How CSS, JS, images are served (CDN integration)
- **Session Management**: How user sessions are maintained across requests
- **Inter-Service Communication**: How backend services communicate with each other
"""
    
    return f"""
# AWS Architecture Design for User Requirements

## User Requirements Analysis
{user_requirements}

## Recommended Architecture

*Note: This tool interfaces with the AWS Architecture Design Agent. The detailed architecture design will be generated by the agent using AWS MCP server data and best practices.*
{data_flow_section}
**The agent will analyze your requirements and provide:**
- AWS service recommendations
- Architecture diagrams and components
- Application data flow patterns and components
- Security and compliance considerations
- Performance optimization strategies
- Cost optimization recommendations
- Implementation roadmap

**Next Steps:**
1. The agent will process your requirements
2. Query AWS documentation for current service information
3. Generate detailed architecture design with application data flow components
4. Provide implementation recommendations

---
*Processing your requirements with AWS best practices and current service information...*
""" 


@tool
def add_application_data_flow(base_architecture: str, flow_requirements: str) -> str:
    """
    Add application data flow components to an existing AWS architecture design.
    
    Args:
        base_architecture: Existing architecture design
        flow_requirements: Specific application flow requirements (authentication, API patterns, etc.)
        
    Returns:
        Enhanced architecture design with application data flow components
    """
    
    return f"""
# Enhanced AWS Architecture with Application Data Flow

## Base Architecture
{base_architecture}

## Application Flow Requirements
{flow_requirements}

## Application Data Flow Enhancement

*Note: The agent will enhance the architecture with comprehensive application data flow components including:*

### Request Processing Flow
- **Load Balancer → Application**: Traffic distribution and SSL termination
- **Application → Backend Services**: Internal API calls and service mesh
- **Service → Database**: Query patterns and connection management
- **Response Path**: Data formatting and client delivery

### Authentication & Authorization Flow
- **User Login**: Credential validation and token generation
- **JWT Token Flow**: Token validation across services
- **Session Management**: Session storage and retrieval
- **Role-Based Access**: Permission checking and enforcement

### API Data Flow Patterns
- **RESTful Endpoints**: Standard CRUD operations
- **Request Validation**: Input sanitization and validation
- **Response Formatting**: JSON/XML response structuring
- **Error Responses**: Standardized error handling

### Database Interaction Patterns
- **Connection Pooling**: Efficient database connections
- **Read/Write Patterns**: Query optimization and caching
- **Transaction Management**: ACID compliance and rollback
- **Data Validation**: Input validation and constraints

### Caching Flow Patterns
- **Application Cache**: In-memory caching (Redis/ElastiCache)
- **CDN Cache**: Static asset delivery via CloudFront
- **Database Query Cache**: Frequently accessed data caching
- **Session Cache**: User session storage

---
*The agent will provide detailed application flow patterns and implementation guidance...*
""" 